# zeelos - cloud
# MAINTAINER zeelos.io - https://zeelos.io

version: '3.6'

services:
  zookeeper-cloud-1:
    image: zeelos/cp-zookeeper:5.2.2
    volumes:
      - zookeeper-data-1:/var/lib/zookeeper/data
      - zookeeper-log-1:/var/lib/zookeeper/log
    environment:
      - ZOOKEEPER_SERVER_ID=1
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT= 2
      - ZOOKEEPER_SERVERS=0.0.0.0:12888:13888;zookeeper-cloud-2:22888:23888;zookeeper-cloud-3:32888:33888
      - KAFKA_OPTS=-javaagent:/etc/kafka/prometheus/jmx_prometheus_javaagent.jar=8080:/etc/kafka/prometheus/jmx-exporter-zookeeper-config.yml
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
                       -Dcom.sun.management.jmxremote.ssl=false
                       -Djava.rmi.server.hostname=zookeeper-cloud-1
                       -Dcom.sun.management.jmxremote.local.only=false
                       -Dcom.sun.management.jmxremote.rmi.port=9580
                       -Dcom.sun.management.jmxremote.port=9580
      - KAFKA_HEAP_OPTS=${zookeeper.heap_opts}
    networks:
      - cloudnet
      - monnet
    ports:
      - published: 2181
        target: 2181
        mode: host
      - published: 9580
        target: 9580
        mode: host
    configs:
      - source: kafka.jmx-exporter-javaagent-jar
        target: /etc/kafka/prometheus/jmx_prometheus_javaagent.jar
      - source: kafka.jmx-exporter-zookeeper-config
        target: /etc/kafka/prometheus/jmx-exporter-zookeeper-config.yml
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-1
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "ZooKeeper - An open-source server which enables highly reliable distributed coordination"

  zookeeper-cloud-2:
    image: zeelos/cp-zookeeper:5.2.2
    volumes:
      - zookeeper-data-2:/var/lib/zookeeper/data
      - zookeeper-log-2:/var/lib/zookeeper/log
    environment:
      - ZOOKEEPER_SERVER_ID=2
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT= 2
      - ZOOKEEPER_SERVERS=zookeeper-cloud-1:12888:13888;0.0.0.0:22888:23888;zookeeper-cloud-3:32888:33888
      - KAFKA_OPTS=-javaagent:/etc/kafka/prometheus/jmx_prometheus_javaagent.jar=8080:/etc/kafka/prometheus/jmx-exporter-zookeeper-config.yml
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
                       -Dcom.sun.management.jmxremote.ssl=false
                       -Djava.rmi.server.hostname=zookeeper-cloud-2
                       -Dcom.sun.management.jmxremote.local.only=false
                       -Dcom.sun.management.jmxremote.rmi.port=9580
                       -Dcom.sun.management.jmxremote.port=9580
      - KAFKA_HEAP_OPTS=${zookeeper.heap_opts}
    networks:
      - cloudnet
      - monnet
    ports:
      - published: 2181
        target: 2181
        mode: host
      - published: 9580
        target: 9580
        mode: host
    configs:
      - source: kafka.jmx-exporter-javaagent-jar
        target: /etc/kafka/prometheus/jmx_prometheus_javaagent.jar
      - source: kafka.jmx-exporter-zookeeper-config
        target: /etc/kafka/prometheus/jmx-exporter-zookeeper-config.yml
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-2
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "ZooKeeper - An open-source server which enables highly reliable distributed coordination"

  zookeeper-cloud-3:
    image: zeelos/cp-zookeeper:5.2.2
    volumes:
      - zookeeper-data-3:/var/lib/zookeeper/data
      - zookeeper-log-3:/var/lib/zookeeper/log
    environment:
      - ZOOKEEPER_SERVER_ID=3
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT= 2
      - ZOOKEEPER_SERVERS=zookeeper-cloud-1:12888:13888;zookeeper-cloud-2:22888:23888;0.0.0.0:32888:33888
      - KAFKA_OPTS=-javaagent:/etc/kafka/prometheus/jmx_prometheus_javaagent.jar=8080:/etc/kafka/prometheus/jmx-exporter-zookeeper-config.yml
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
                       -Dcom.sun.management.jmxremote.ssl=false
                       -Djava.rmi.server.hostname=zookeeper-cloud-3
                       -Dcom.sun.management.jmxremote.local.only=false
                       -Dcom.sun.management.jmxremote.rmi.port=9580
                       -Dcom.sun.management.jmxremote.port=9580
      - KAFKA_HEAP_OPTS=${zookeeper.heap_opts}
    networks:
      - cloudnet
      - monnet
    ports:
      - published: 2181
        target: 2181
        mode: host
      - published: 9580
        target: 9580
        mode: host
    configs:
      - source: kafka.jmx-exporter-javaagent-jar
        target: /etc/kafka/prometheus/jmx_prometheus_javaagent.jar
      - source: kafka.jmx-exporter-zookeeper-config
        target: /etc/kafka/prometheus/jmx-exporter-zookeeper-config.yml
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-3
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "ZooKeeper - An open-source server which enables highly reliable distributed coordination"

  kafka-cloud-1:
    image: zeelos/cp-kafka:5.2.2
    volumes:
      - kafka-data-1:/var/lib/kafka/data
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-cloud-1:2181,zookeeper-cloud-2:2181,zookeeper-cloud-3:2181
      - KAFKA_LISTENERS=SSL://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=SSL://kafka-cloud-1:9092
      - KAFKA_OPTS=-javaagent:/etc/kafka/prometheus/jmx_prometheus_javaagent.jar=8080:/etc/kafka/prometheus/jmx-exporter-kafka-config.yml
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=3
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_DELETE_TOPIC_ENABLE=false
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_HOURS=8760
      - KAFKA_HEAP_OPTS=${kafka.heap_opts}
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
                       -Dcom.sun.management.jmxremote.ssl=false
                       -Djava.rmi.server.hostname=kafka-cloud-1
                       -Dcom.sun.management.jmxremote.local.only=false
                       -Dcom.sun.management.jmxremote.rmi.port=9581
                       -Dcom.sun.management.jmxremote.port=9581
      - KAFKA_INTER_BROKER_LISTENER_NAME=SSL
      - KAFKA_SSL_KEYSTORE_FILENAME=kafka.kafka-cloud.keystore.jks
      - KAFKA_SSL_KEYSTORE_CREDENTIALS=kafka-cloud_keystore_creds
      - KAFKA_SSL_KEY_CREDENTIALS=kafka-cloud_sslkey_creds
      - KAFKA_SSL_TRUSTSTORE_FILENAME=kafka.kafka-cloud.truststore.jks
      - KAFKA_SSL_TRUSTSTORE_CREDENTIALS=kafka-cloud_truststore_creds
      - KAFKA_SSL_CLIENT_AUTH=required
      - KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=
    configs:
      - source: kafka.jmx-exporter-javaagent-jar
        target: /etc/kafka/prometheus/jmx_prometheus_javaagent.jar
      - source: kafka.jmx-exporter-kafka-config
        target: /etc/kafka/prometheus/jmx-exporter-kafka-config.yml
    secrets:
      - source: kafka.kafka-cloud.keystore.jks
        target: /etc/kafka/secrets/kafka.kafka-cloud.keystore.jks
      - source: kafka-cloud_keystore_creds
        target: /etc/kafka/secrets/kafka-cloud_keystore_creds
      - source: kafka-cloud_sslkey_creds
        target: /etc/kafka/secrets/kafka-cloud_sslkey_creds
      - source: kafka.kafka-cloud.truststore.jks
        target: /etc/kafka/secrets/kafka.kafka-cloud.truststore.jks
      - source: kafka-cloud_truststore_creds
        target: /etc/kafka/secrets/kafka-cloud_truststore_creds
    networks:
      - cloudnet
      - monnet
    ports:
      - published: 9092
        target: 9092
        mode: host
      - published: 9581
        target: 9581
        mode: host
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-1
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "Kafka - A distributed streaming platform"

  kafka-cloud-2:
    image: zeelos/cp-kafka:5.2.2
    volumes:
      - kafka-data-2:/var/lib/kafka/data
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-cloud-1:2181,zookeeper-cloud-2:2181,zookeeper-cloud-3:2181
      - KAFKA_LISTENERS=SSL://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=SSL://kafka-cloud-2:9092
      - KAFKA_OPTS=-javaagent:/etc/kafka/prometheus/jmx_prometheus_javaagent.jar=8080:/etc/kafka/prometheus/jmx-exporter-kafka-config.yml
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=3
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_DELETE_TOPIC_ENABLE=false      
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_HOURS=8760
      - KAFKA_HEAP_OPTS=${kafka.heap_opts}
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
                       -Dcom.sun.management.jmxremote.ssl=false
                       -Djava.rmi.server.hostname=kafka-cloud-2
                       -Dcom.sun.management.jmxremote.local.only=false
                       -Dcom.sun.management.jmxremote.rmi.port=9581
                       -Dcom.sun.management.jmxremote.port=9581
      - KAFKA_INTER_BROKER_LISTENER_NAME=SSL
      - KAFKA_SSL_KEYSTORE_FILENAME=kafka.kafka-cloud.keystore.jks
      - KAFKA_SSL_KEYSTORE_CREDENTIALS=kafka-cloud_keystore_creds
      - KAFKA_SSL_KEY_CREDENTIALS=kafka-cloud_sslkey_creds
      - KAFKA_SSL_TRUSTSTORE_FILENAME=kafka.kafka-cloud.truststore.jks
      - KAFKA_SSL_TRUSTSTORE_CREDENTIALS=kafka-cloud_truststore_creds
      - KAFKA_SSL_CLIENT_AUTH=required
      - KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=
    configs:
      - source: kafka.jmx-exporter-javaagent-jar
        target: /etc/kafka/prometheus/jmx_prometheus_javaagent.jar
      - source: kafka.jmx-exporter-kafka-config
        target: /etc/kafka/prometheus/jmx-exporter-kafka-config.yml
    secrets:
      - source: kafka.kafka-cloud.keystore.jks
        target: /etc/kafka/secrets/kafka.kafka-cloud.keystore.jks
      - source: kafka-cloud_keystore_creds
        target: /etc/kafka/secrets/kafka-cloud_keystore_creds
      - source: kafka-cloud_sslkey_creds
        target: /etc/kafka/secrets/kafka-cloud_sslkey_creds
      - source: kafka.kafka-cloud.truststore.jks
        target: /etc/kafka/secrets/kafka.kafka-cloud.truststore.jks
      - source: kafka-cloud_truststore_creds
        target: /etc/kafka/secrets/kafka-cloud_truststore_creds
    networks:
      - cloudnet
      - monnet
    ports:
      - published: 9092
        target: 9092
        mode: host
      - published: 9581
        target: 9581
        mode: host
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-2
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "Kafka - A distributed streaming platform"

  kafka-cloud-3:
    image: zeelos/cp-kafka:5.2.2
    volumes:
      - kafka-data-3:/var/lib/kafka/data
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-cloud-1:2181,zookeeper-cloud-2:2181,zookeeper-cloud-3:2181
      - KAFKA_LISTENERS=SSL://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=SSL://kafka-cloud-3:9092
      - KAFKA_OPTS=-javaagent:/etc/kafka/prometheus/jmx_prometheus_javaagent.jar=8080:/etc/kafka/prometheus/jmx-exporter-kafka-config.yml
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=3
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_DELETE_TOPIC_ENABLE=false      
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_HOURS=8760
      - KAFKA_HEAP_OPTS=${kafka.heap_opts}
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
                       -Dcom.sun.management.jmxremote.ssl=false
                       -Djava.rmi.server.hostname=kafka-cloud-3
                       -Dcom.sun.management.jmxremote.local.only=false
                       -Dcom.sun.management.jmxremote.rmi.port=9581
                       -Dcom.sun.management.jmxremote.port=9581
      - KAFKA_INTER_BROKER_LISTENER_NAME=SSL
      - KAFKA_SSL_KEYSTORE_FILENAME=kafka.kafka-cloud.keystore.jks
      - KAFKA_SSL_KEYSTORE_CREDENTIALS=kafka-cloud_keystore_creds
      - KAFKA_SSL_KEY_CREDENTIALS=kafka-cloud_sslkey_creds
      - KAFKA_SSL_TRUSTSTORE_FILENAME=kafka.kafka-cloud.truststore.jks
      - KAFKA_SSL_TRUSTSTORE_CREDENTIALS=kafka-cloud_truststore_creds
      - KAFKA_SSL_CLIENT_AUTH=required
      - KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=
    configs:
      - source: kafka.jmx-exporter-javaagent-jar
        target: /etc/kafka/prometheus/jmx_prometheus_javaagent.jar
      - source: kafka.jmx-exporter-kafka-config
        target: /etc/kafka/prometheus/jmx-exporter-kafka-config.yml
    secrets:
      - source: kafka.kafka-cloud.keystore.jks
        target: /etc/kafka/secrets/kafka.kafka-cloud.keystore.jks
      - source: kafka-cloud_keystore_creds
        target: /etc/kafka/secrets/kafka-cloud_keystore_creds
      - source: kafka-cloud_sslkey_creds
        target: /etc/kafka/secrets/kafka-cloud_sslkey_creds
      - source: kafka.kafka-cloud.truststore.jks
        target: /etc/kafka/secrets/kafka.kafka-cloud.truststore.jks
      - source: kafka-cloud_truststore_creds
        target: /etc/kafka/secrets/kafka-cloud_truststore_creds
    networks:
      - cloudnet
      - monnet
    ports:
      - published: 9092
        target: 9092
        mode: host
      - published: 9581
        target: 9581
        mode: host
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-3
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "Kafka - A distributed streaming platform"

  schema-registry-cloud:
    image: zeelos/cp-schema-registry:5.2.2
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry-cloud
      - SCHEMA_REGISTRY_LISTENERS=https://0.0.0.0:8081
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=SSL://kafka-cloud-1:9092,SSL://kafka-cloud-2:9092,SSL://kafka-cloud-3:9092
      - SCHEMA_REGISTRY_MASTER_ELIGIBILIY=true
      - SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL=https
      - SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID=zeelos
      - SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN=*
      - SCHEMA_REGISTRY_OPTS=-javaagent:/etc/kafka/prometheus/jmx_prometheus_javaagent.jar=8080:/etc/kafka/prometheus/jmx-exporter-kafka-config.yml      
      - SCHEMA_REGISTRY_HEAP_OPTS=${schema.heap_opts}
      - SCHEMA_REGISTRY_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
                                 -Dcom.sun.management.jmxremote.ssl=false
                                 -Djava.rmi.server.hostname=schema-registry-cloud
                                 -Dcom.sun.management.jmxremote.local.only=false
                                 -Dcom.sun.management.jmxremote.rmi.port=9582
                                 -Dcom.sun.management.jmxremote.port=9582
      - SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL=SSL
      - SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION=/etc/kafka/secrets/kafka.schema-registry-cloud.truststore.jks
      - SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD=${ssl.truststorepass}
      - SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION=/etc/kafka/secrets/kafka.schema-registry-cloud.keystore.jks
      - SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD=${ssl.keystorepass}
      - SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD=${ssl.keypass}
      - SCHEMA_REGISTRY_KAFKASTORE_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=
      - SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION=/etc/kafka/secrets/kafka.schema-registry-cloud.truststore.jks
      - SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD=${ssl.truststorepass}
      - SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION=/etc/kafka/secrets/kafka.schema-registry-cloud.keystore.jks
      - SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD=${ssl.keystorepass}
      - SCHEMA_REGISTRY_SSL_KEY_PASSWORD=${ssl.keypass}
      - SCHEMA_REGISTRY_SSL_CLIENT_AUTH=true
      - SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL=INFO
    configs:
      - source: kafka.jmx-exporter-javaagent-jar
        target: /etc/kafka/prometheus/jmx_prometheus_javaagent.jar
      - source: kafka.jmx-exporter-kafka-config
        target: /etc/kafka/prometheus/jmx-exporter-kafka-config.yml
    secrets:
      - source: kafka.schema-registry-cloud.keystore.jks
        target: /etc/kafka/secrets/kafka.schema-registry-cloud.keystore.jks
      - source: kafka.schema-registry-cloud.truststore.jks
        target: /etc/kafka/secrets/kafka.schema-registry-cloud.truststore.jks
    networks:
      - cloudnet
    ports:
      - published: 8081
        target: 8081
        mode: ingress
      - published: 9582
        target: 9582
        mode: host
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-4
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "Schema Registry - Schema registry for Apache Kafka"

  rest-cloud:
    image: zeelos/cp-kafka-rest:5.2.2
    environment:
      - KAFKA_REST_HOST_NAME=rest-cloud
      - KAFKA_REST_LISTENERS=https://0.0.0.0:8082
      - KAFKA_REST_ZOOKEEPER_CONNECT=zookeeper-cloud-1:2181,zookeeper-cloud-2:2181,zookeeper-cloud-3:2181
      - KAFKA_REST_BOOTSTRAP_SERVERS=SSL://kafka-cloud-1:9092,SSL://kafka-cloud-2:9092,SSL://kafka-cloud-3:9092
      - KAFKA_REST_SCHEMA_REGISTRY_URL=https://schema-registry-cloud:8081
      - KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN=*
      - KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS=30000
      - KAFKAREST_OPTS=-javaagent:/etc/kafka/prometheus/jmx_prometheus_javaagent.jar=8080:/etc/kafka/prometheus/jmx-exporter-kafka-config.yml
      - KAFKAREST_HEAP_OPTS=${rest.heap_opts}
      - KAFKAREST_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
                           -Dcom.sun.management.jmxremote.ssl=false
                           -Djava.rmi.server.hostname=rest-cloud
                           -Dcom.sun.management.jmxremote.local.only=false
                           -Dcom.sun.management.jmxremote.rmi.port=9583
                           -Dcom.sun.management.jmxremote.port=9583
      - KAFKA_REST_CLIENT_SECURITY_PROTOCOL=SSL
      - KAFKA_REST_CLIENT_SSL_TRUSTSTORE_LOCATION=/etc/kafka/secrets/kafka.rest-cloud.truststore.jks
      - KAFKA_REST_CLIENT_SSL_TRUSTSTORE_PASSWORD=${ssl.truststorepass}
      - KAFKA_REST_CLIENT_SSL_KEYSTORE_LOCATION=/etc/kafka/secrets/kafka.rest-cloud.keystore.jks
      - KAFKA_REST_CLIENT_SSL_KEYSTORE_PASSWORD=${ssl.keystorepass}
      - KAFKA_REST_CLIENT_SSL_KEY_PASSWORD=${ssl.keypass}
      - KAFKA_REST_CLIENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=
      - KAFKA_REST_SSL_TRUSTSTORE_LOCATION=/etc/kafka/secrets/kafka.rest-cloud.truststore.jks
      - KAFKA_REST_SSL_TRUSTSTORE_PASSWORD=${ssl.truststorepass}
      - KAFKA_REST_SSL_KEYSTORE_LOCATION=/etc/kafka/secrets/kafka.rest-cloud.keystore.jks
      - KAFKA_REST_SSL_KEYSTORE_PASSWORD=${ssl.keystorepass}
      - KAFKA_REST_SSL_KEY_PASSWORD=${ssl.keypass}
      - KAFKA_REST_SSL_CLIENT_AUTH=true
    configs:
      - source: kafka.jmx-exporter-javaagent-jar
        target: /etc/kafka/prometheus/jmx_prometheus_javaagent.jar
      - source: kafka.jmx-exporter-kafka-config
        target: /etc/kafka/prometheus/jmx-exporter-kafka-config.yml
    secrets:
      - source: kafka.rest-cloud.keystore.jks
        target: /etc/kafka/secrets/kafka.rest-cloud.keystore.jks
      - source: kafka.rest-cloud.truststore.jks
        target: /etc/kafka/secrets/kafka.rest-cloud.truststore.jks
    networks:
      - cloudnet
    ports:
      - published: 8082
        target: 8082
        mode: host
      - published: 9583
        target: 9583
        mode: host
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-4
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "Kafka REST Proxy - A RESTful interface to a Kafka cluster"

  kafka-command-client:
    image: zeelos/cp-kafka-connect-base:5.2.2
    environment:
      - SCHEMA_REGISTRY_OPTS=-Djavax.net.ssl.trustStore=/etc/kafka/secrets/kafka.client-cloud.truststore.jks
                             -Djavax.net.ssl.trustStorePassword=${ssl.truststorepass}
                             -Djavax.net.ssl.keyStore=/etc/kafka/secrets/kafka.client-cloud.keystore.jks
                             -Djavax.net.ssl.keyStorePassword=${ssl.keystorepass}
    command: "bash -c -a 'tail -f /dev/null'"
    secrets:
      - source: kafka.client-cloud.keystore.jks
        target: /etc/kafka/secrets/kafka.client-cloud.keystore.jks
      - source: kafka.client-cloud.truststore.jks
        target: /etc/kafka/secrets/kafka.client-cloud.truststore.jks
      - source: client_security_cloud.properties
        target: /etc/kafka/secrets/client_security_cloud.properties
    networks:
      - cloudnet
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-4
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "Kafka Command Client - An entry-point to issue commands against the Kafka Cloud Cluster"

  kafka-exporter-cloud:
    image: zeelos/kafka_exporter:v1.2.0
    secrets:
      - source: client-cloud.certificate.pem
        target: /etc/kafka/secrets/client-cloud.certificate.pem
      - source: client-cloud.key
        target: /etc/kafka/secrets/client-cloud.key
    networks:
      - cloudnet
      - monnet
    command:
      - '--kafka.server=kafka-cloud-1:9092'
      - '--kafka.server=kafka-cloud-2:9092'
      - '--kafka.server=kafka-cloud-3:9092'
      - '--web.listen-address=:8080'
      - '--tls.enabled'
      - '--tls.cert-file=/etc/kafka/secrets/client-cloud.certificate.pem'
      - '--tls.key-file=/etc/kafka/secrets/client-cloud.key'
      - '--tls.insecure-skip-tls-verify'
    deploy:
      placement:
        constraints:
          - node.hostname == ${project.name}-${project.region}-${project.zone}-swarm-worker-4
    labels:
      io.zeelos.app: ${project.name}
      io.zeelos.role: "Kafka Exporter - Kafka exporter for Prometheus (non-jmx)"

configs:
  kafka.jmx-exporter-javaagent-jar:
    file: configs/prometheus/exporters/kafka/jmx_prometheus_javaagent-0.11.0.jar
  kafka.jmx-exporter-zookeeper-config:
    file: configs/prometheus/exporters/kafka/jmx-exporter-zookeeper-config.yml
  kafka.jmx-exporter-kafka-config:
    file: configs/prometheus/exporters/kafka/jmx-exporter-kafka-config.yml

secrets:
  kafka.kafka-cloud.keystore.jks:
    file: security/kafka.kafka-cloud.keystore.jks
  kafka-cloud_keystore_creds:
    file: security/kafka-cloud_keystore_creds
  kafka-cloud_sslkey_creds:
    file: security/kafka-cloud_sslkey_creds
  kafka.kafka-cloud.truststore.jks:
    file: security/kafka.kafka-cloud.truststore.jks
  kafka-cloud_truststore_creds:
    file: security/kafka-cloud_truststore_creds
  kafka.schema-registry-cloud.keystore.jks:
    file: security/kafka.schema-registry-cloud.keystore.jks
  kafka.schema-registry-cloud.truststore.jks:
    file: security/kafka.schema-registry-cloud.truststore.jks
  kafka.rest-cloud.keystore.jks:
    file: security/kafka.rest-cloud.keystore.jks
  kafka.rest-cloud.truststore.jks:
    file: security/kafka.rest-cloud.truststore.jks
  kafka.client-cloud.keystore.jks:
    file: security/kafka.client-cloud.keystore.jks
  kafka.client-cloud.truststore.jks:
    file: security/kafka.client-cloud.truststore.jks
  client_security_cloud.properties:
    file: security/client_security_cloud.properties
  client-cloud.certificate.pem:
    file: security/client-cloud.certificate.pem
  client-cloud.key:
    file: security/client-cloud.key

volumes:
  zookeeper-data-1:
    driver: rexray/gcepd
    driver_opts:
      size: 10
  zookeeper-log-1:
    driver: rexray/gcepd
    driver_opts:
      size: 10
  zookeeper-data-2:
    driver: rexray/gcepd
    driver_opts:
      size: 10
  zookeeper-log-2:
    driver: rexray/gcepd
    driver_opts:
      size: 10
  zookeeper-data-3:
    driver: rexray/gcepd
    driver_opts:
      size: 10
  zookeeper-log-3:
    driver: rexray/gcepd
    driver_opts:
      size: 10
  kafka-data-1:
    driver: rexray/gcepd
    driver_opts:
      size: 20
  kafka-data-2:
    driver: rexray/gcepd
    driver_opts:
      size: 20
  kafka-data-3:
    driver: rexray/gcepd
    driver_opts:
      size: 20

networks:
  monnet:
    external: true
    name: monnet
  cloudnet:
    external: true
    name: cloudnet
